// <auto-generated />
using System;
using MAG.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAG.Services.Migrations
{
    [DbContext(typeof(MagContext))]
    [Migration("20240708192401_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAG.Services.Database.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginAir")
                        .HasColumnType("datetime");

                    b.Property<int>("EpisodesNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishAir")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ImageURL");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Studio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TitleEN");

                    b.Property<string>("TitleJp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TitleJP");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TrailerURL");

                    b.HasKey("Id");

                    b.ToTable("Anime", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginAir = new DateTime(2013, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodesNumber = 25,
                            FinishAir = new DateTime(2013, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cdn.myanimelist.net/images/anime/1907/134102l.jpg",
                            Season = "Spring",
                            Studio = "Wit Studio",
                            Synopsis = "Centuries ago, mankind was slaughtered to near extinction by monstrous humanoid creatures called Titans, forcing humans to hide in fear behind enormous concentric walls. What makes these giants truly terrifying is that their taste for human flesh is not born out of hunger but what appears to be out of pleasure. To ensure their survival, the remnants of humanity began living within defensive barriers, resulting in one hundred years without a single titan encounter. However, that fragile calm is soon shattered when a colossal Titan manages to breach the supposedly impregnable outer wall, reigniting the fight for survival against the man-eating abominations.\r\n\r\nAfter witnessing a horrific personal loss at the hands of the invading creatures, Eren Yeager dedicates his life to their eradication by enlisting into the Survey Corps, an elite military unit that combats the merciless humanoids outside the protection of the walls. Eren, his adopted sister Mikasa Ackerman, and his childhood friend Armin Arlert join the brutal war against the Titans and race to discover a way of defeating them before the last walls are breached.",
                            TitleEn = "Attack on Titan",
                            TitleJp = "Shingeki no Kyojin",
                            TrailerUrl = "https://youtu.be/LHtdKWJdif4"
                        });
                });

            modelBuilder.Entity("MAG.Services.Database.AnimeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasColumnName("AnimeID");

                    b.Property<int>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("ListId");

                    b.ToTable("Anime_List", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.AnimeWatchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasColumnName("AnimeID");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("datetime");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("WatchStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("WatchlistId")
                        .HasColumnType("int")
                        .HasColumnName("WatchlistID");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("Anime_Watchlist", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoverId")
                        .HasColumnType("int")
                        .HasColumnName("CoverID");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Club", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.ClubCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Cover")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ClubCover", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.ClubUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("ClubID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Club_User", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("int");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateDonated")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Donation", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.GenreAnime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasColumnName("AnimeID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("GenreId");

                    b.ToTable("Genre_Anime", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("List", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("ClubID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("int");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.PreferredGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("PreferredGenres");
                });

            modelBuilder.Entity("MAG.Services.Database.QA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("Displayed")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Q&A", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.QAcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Q&ACategory", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasColumnName("AnimeID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", null, t =>
                        {
                            t.HasTrigger("UpdateAnimeScore");
                        });
                });

            modelBuilder.Entity("MAG.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfilePictureId")
                        .HasColumnType("int")
                        .HasColumnName("ProfilePictureID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .UseCollation("Latin1_General_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.UserCommentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommentAction", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.UserPostAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPostAction", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.UserProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfilePicture", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAskQuestions")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanParticipateInClubs")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReview")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Watchlist", (string)null);
                });

            modelBuilder.Entity("MAG.Services.Database.AnimeList", b =>
                {
                    b.HasOne("MAG.Services.Database.Anime", "Anime")
                        .WithMany("AnimeLists")
                        .HasForeignKey("AnimeId")
                        .IsRequired()
                        .HasConstraintName("FK_Anime_List_Anime");

                    b.HasOne("MAG.Services.Database.List", "List")
                        .WithMany("AnimeLists")
                        .HasForeignKey("ListId")
                        .IsRequired()
                        .HasConstraintName("FK_Anime_List_List");

                    b.Navigation("Anime");

                    b.Navigation("List");
                });

            modelBuilder.Entity("MAG.Services.Database.AnimeWatchlist", b =>
                {
                    b.HasOne("MAG.Services.Database.Anime", "Anime")
                        .WithMany("AnimeWatchlists")
                        .HasForeignKey("AnimeId")
                        .IsRequired()
                        .HasConstraintName("FK_Anime_Watchlist_Anime");

                    b.HasOne("MAG.Services.Database.Watchlist", "Watchlist")
                        .WithMany("AnimeWatchlists")
                        .HasForeignKey("WatchlistId")
                        .IsRequired()
                        .HasConstraintName("FK_Anime_Watchlist_Watchlist");

                    b.Navigation("Anime");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("MAG.Services.Database.Club", b =>
                {
                    b.HasOne("MAG.Services.Database.ClubCover", "Cover")
                        .WithMany("Clubs")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("FK_Club_ClubCover");

                    b.HasOne("MAG.Services.Database.User", "Owner")
                        .WithMany("Clubs")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Club_User");

                    b.Navigation("Cover");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MAG.Services.Database.ClubUser", b =>
                {
                    b.HasOne("MAG.Services.Database.Club", "Club")
                        .WithMany("ClubUsers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Club_User_Club");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("ClubUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Club_User_User");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Comment", b =>
                {
                    b.HasOne("MAG.Services.Database.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Post");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Donation", b =>
                {
                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Donation_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.GenreAnime", b =>
                {
                    b.HasOne("MAG.Services.Database.Anime", "Anime")
                        .WithMany("GenreAnimes")
                        .HasForeignKey("AnimeId")
                        .IsRequired()
                        .HasConstraintName("FK_Genre_Anime_Anime");

                    b.HasOne("MAG.Services.Database.Genre", "Genre")
                        .WithMany("GenreAnimes")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Genre_Anime_Genre");

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MAG.Services.Database.List", b =>
                {
                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_List_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Post", b =>
                {
                    b.HasOne("MAG.Services.Database.Club", "Club")
                        .WithMany("Posts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Post_Club");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_User");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.PreferredGenre", b =>
                {
                    b.HasOne("MAG.Services.Database.Genre", "Genre")
                        .WithMany("PreferredGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_PreferredGenres_Genre");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("PreferredGenres")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PreferredGenres_User");

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.QA", b =>
                {
                    b.HasOne("MAG.Services.Database.QAcategory", "Category")
                        .WithMany("QAs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Q&A_Q&ACategory");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("QAs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Q&A_User");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Rating", b =>
                {
                    b.HasOne("MAG.Services.Database.Anime", "Anime")
                        .WithMany("Ratings")
                        .HasForeignKey("AnimeId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Anime");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.User", b =>
                {
                    b.HasOne("MAG.Services.Database.UserProfilePicture", "ProfilePicture")
                        .WithMany("Users")
                        .HasForeignKey("ProfilePictureId")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserProfilePicture");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("MAG.Services.Database.UserCommentAction", b =>
                {
                    b.HasOne("MAG.Services.Database.Comment", "Comment")
                        .WithMany("UserCommentActions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserCommentAction_Comment");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("UserCommentActions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCommentAction_User");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.UserPostAction", b =>
                {
                    b.HasOne("MAG.Services.Database.Post", "Post")
                        .WithMany("UserPostActions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserPostAction_Post");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("UserPostActions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPostAction_User");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.UserRole", b =>
                {
                    b.HasOne("MAG.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role_Role");

                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Watchlist", b =>
                {
                    b.HasOne("MAG.Services.Database.User", "User")
                        .WithMany("Watchlists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Watchlist_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAG.Services.Database.Anime", b =>
                {
                    b.Navigation("AnimeLists");

                    b.Navigation("AnimeWatchlists");

                    b.Navigation("GenreAnimes");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MAG.Services.Database.Club", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MAG.Services.Database.ClubCover", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("MAG.Services.Database.Comment", b =>
                {
                    b.Navigation("UserCommentActions");
                });

            modelBuilder.Entity("MAG.Services.Database.Genre", b =>
                {
                    b.Navigation("GenreAnimes");

                    b.Navigation("PreferredGenres");
                });

            modelBuilder.Entity("MAG.Services.Database.List", b =>
                {
                    b.Navigation("AnimeLists");
                });

            modelBuilder.Entity("MAG.Services.Database.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserPostActions");
                });

            modelBuilder.Entity("MAG.Services.Database.QAcategory", b =>
                {
                    b.Navigation("QAs");
                });

            modelBuilder.Entity("MAG.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MAG.Services.Database.User", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Clubs");

                    b.Navigation("Comments");

                    b.Navigation("Donations");

                    b.Navigation("Lists");

                    b.Navigation("Posts");

                    b.Navigation("PreferredGenres");

                    b.Navigation("QAs");

                    b.Navigation("Ratings");

                    b.Navigation("UserCommentActions");

                    b.Navigation("UserPostActions");

                    b.Navigation("UserRoles");

                    b.Navigation("Watchlists");
                });

            modelBuilder.Entity("MAG.Services.Database.UserProfilePicture", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MAG.Services.Database.Watchlist", b =>
                {
                    b.Navigation("AnimeWatchlists");
                });
#pragma warning restore 612, 618
        }
    }
}
